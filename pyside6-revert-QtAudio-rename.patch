commit 1d4c429fa03c434a22b700dc1dd86bd4415ff9fb
Author: Bernhard Rosenkr√§nzer <bero@lindev.ch>
Date:   Mon Mar 4 13:13:08 2024 +0100

    Revert "Adapt to renaming of namespace QAudio->QtAudio"
    
    This reverts commit 4d761eaaf852f8d82925e111150f25c0dd5f3e83.

diff --git a/examples/multimedia/audiooutput/audiooutput.py b/examples/multimedia/audiooutput/audiooutput.py
index 5219bf652..06d52f68a 100644
--- a/examples/multimedia/audiooutput/audiooutput.py
+++ b/examples/multimedia/audiooutput/audiooutput.py
@@ -10,7 +10,7 @@ from struct import pack
 
 from PySide6.QtCore import (QByteArray, QIODevice, Qt, QSysInfo, QTimer,
                             qWarning, Slot)
-from PySide6.QtMultimedia import (QtAudio, QAudioFormat,
+from PySide6.QtMultimedia import (QAudio, QAudioFormat,
                                   QAudioSink, QMediaDevices)
 from PySide6.QtWidgets import (QApplication, QComboBox, QHBoxLayout, QLabel,
                                QMainWindow, QPushButton, QSlider,
@@ -209,7 +209,7 @@ class AudioTest(QMainWindow):
 
     @Slot()
     def pull_timer_expired(self):
-        if self.m_audioSink is not None and self.m_audioSink.state() != QtAudio.StoppedState:
+        if self.m_audioSink is not None and self.m_audioSink.state() != QAudio.StoppedState:
             bytes_free = self.m_audioSink.bytesFree()
             data = self.m_generator.read(bytes_free)
             if data:
@@ -234,28 +234,28 @@ class AudioTest(QMainWindow):
 
     @Slot()
     def toggle_suspend_resume(self):
-        if self.m_audioSink.state() == QtAudio.State.SuspendedState:
+        if self.m_audioSink.state() == QAudio.SuspendedState:
             qWarning("status: Suspended, resume()")
             self.m_audioSink.resume()
             self.m_suspendResumeButton.setText(self.SUSPEND_LABEL)
-        elif self.m_audioSink.state() == QtAudio.State.ActiveState:
+        elif self.m_audioSink.state() == QAudio.ActiveState:
             qWarning("status: Active, suspend()")
             self.m_audioSink.suspend()
             self.m_suspendResumeButton.setText(self.RESUME_LABEL)
-        elif self.m_audioSink.state() == QtAudio.State.StoppedState:
+        elif self.m_audioSink.state() == QAudio.StoppedState:
             qWarning("status: Stopped, resume()")
             self.m_audioSink.resume()
             self.m_suspendResumeButton.setText(self.SUSPEND_LABEL)
-        elif self.m_audioSink.state() == QtAudio.State.IdleState:
+        elif self.m_audioSink.state() == QAudio.IdleState:
             qWarning("status: IdleState")
 
     state_map = {
-        QtAudio.State.ActiveState: "ActiveState",
-        QtAudio.State.SuspendedState: "SuspendedState",
-        QtAudio.State.StoppedState: "StoppedState",
-        QtAudio.State.IdleState: "IdleState"}
+        QAudio.ActiveState: "ActiveState",
+        QAudio.SuspendedState: "SuspendedState",
+        QAudio.StoppedState: "StoppedState",
+        QAudio.IdleState: "IdleState"}
 
-    @Slot(QtAudio.State)
+    @Slot("QAudio::State")
     def handle_state_changed(self, state):
         state = self.state_map.get(state, 'Unknown')
         qWarning(f"state = {state}")
diff --git a/examples/multimedia/audiosource/audiosource.py b/examples/multimedia/audiosource/audiosource.py
index 40046f0a3..a78beb584 100644
--- a/examples/multimedia/audiosource/audiosource.py
+++ b/examples/multimedia/audiosource/audiosource.py
@@ -19,7 +19,7 @@ from typing import Optional
 import PySide6
 from PySide6.QtCore import QByteArray, QMargins, Qt, Slot, qWarning
 from PySide6.QtGui import QPainter, QPalette
-from PySide6.QtMultimedia import QtAudio, QAudioDevice, QAudioFormat, QAudioSource, QMediaDevices
+from PySide6.QtMultimedia import QAudio, QAudioDevice, QAudioFormat, QAudioSource, QMediaDevices
 from PySide6.QtWidgets import (QApplication, QComboBox, QPushButton, QSlider, QVBoxLayout,
                                QWidget, QLabel)
 
@@ -164,10 +164,10 @@ class InputTest(QWidget):
         self.m_audio_info = AudioInfo(format)
 
         self.m_audio_input = QAudioSource(device_info, format)
-        initial_volume = QtAudio.convertVolume(
+        initial_volume = QAudio.convertVolume(
             self.m_audio_input.volume(),
-            QtAudio.LinearVolumeScale,
-            QtAudio.LogarithmicVolumeScale,
+            QAudio.LinearVolumeScale,
+            QAudio.LogarithmicVolumeScale,
         )
         self.m_volume_slider.setValue(int(round(initial_volume * 100)))
         self.toggle_mode()
@@ -196,10 +196,10 @@ class InputTest(QWidget):
     def toggle_suspend(self):
         # toggle suspend/resume
         state = self.m_audio_input.state()
-        if (state == QtAudio.SuspendedState) or (state == QtAudio.StoppedState):
+        if (state == QAudio.SuspendedState) or (state == QAudio.StoppedState):
             self.m_audio_input.resume()
             self.m_suspend_resume_button.setText("Suspend recording")
-        elif state == QtAudio.ActiveState:
+        elif state == QAudio.ActiveState:
             self.m_audio_input.suspend()
             self.m_suspend_resume_button.setText("Resume recording")
         # else no-op
@@ -212,8 +212,8 @@ class InputTest(QWidget):
 
     @Slot(int)
     def slider_changed(self, value):
-        linearVolume = QtAudio.convertVolume(
-            value / float(100), QtAudio.LogarithmicVolumeScale, QtAudio.LinearVolumeScale
+        linearVolume = QAudio.convertVolume(
+            value / float(100), QAudio.LogarithmicVolumeScale, QAudio.LinearVolumeScale
         )
 
         self.m_audio_input.setVolume(linearVolume)
diff --git a/sources/pyside6/PySide6/QtMultimedia/CMakeLists.txt b/sources/pyside6/PySide6/QtMultimedia/CMakeLists.txt
index 61f52cc2b..5cac97ca9 100644
--- a/sources/pyside6/PySide6/QtMultimedia/CMakeLists.txt
+++ b/sources/pyside6/PySide6/QtMultimedia/CMakeLists.txt
@@ -12,6 +12,7 @@ ${QtMultimedia_GEN_DIR}/qaudioinput_wrapper.cpp
 ${QtMultimedia_GEN_DIR}/qaudiooutput_wrapper.cpp
 ${QtMultimedia_GEN_DIR}/qaudiosink_wrapper.cpp
 ${QtMultimedia_GEN_DIR}/qaudiosource_wrapper.cpp
+${QtMultimedia_GEN_DIR}/qaudio_wrapper.cpp
 ${QtMultimedia_GEN_DIR}/qcameraformat_wrapper.cpp
 ${QtMultimedia_GEN_DIR}/qcameradevice_wrapper.cpp
 ${QtMultimedia_GEN_DIR}/qcamera_wrapper.cpp
@@ -28,7 +29,6 @@ ${QtMultimedia_GEN_DIR}/qmediatimerange_wrapper.cpp
 ${QtMultimedia_GEN_DIR}/qmediatimerange_interval_wrapper.cpp
 ${QtMultimedia_GEN_DIR}/qscreencapture_wrapper.cpp
 ${QtMultimedia_GEN_DIR}/qsoundeffect_wrapper.cpp
-${QtMultimedia_GEN_DIR}/qtaudio_wrapper.cpp
 ${QtMultimedia_GEN_DIR}/qtvideo_wrapper.cpp
 ${QtMultimedia_GEN_DIR}/qvideoframe_wrapper.cpp
 ${QtMultimedia_GEN_DIR}/qvideoframeformat_wrapper.cpp
diff --git a/sources/pyside6/PySide6/QtMultimedia/typesystem_multimedia.xml b/sources/pyside6/PySide6/QtMultimedia/typesystem_multimedia.xml
index dc3534299..79539c0ed 100644
--- a/sources/pyside6/PySide6/QtMultimedia/typesystem_multimedia.xml
+++ b/sources/pyside6/PySide6/QtMultimedia/typesystem_multimedia.xml
@@ -8,13 +8,10 @@
     <load-typesystem name="QtGui/typesystem_gui.xml" generate="no"/>
     <load-typesystem name="QtNetwork/typesystem_network.xml" generate="no"/>
 
-    <namespace-type name="QtAudio">
+    <namespace-type name="QAudio">
         <enum-type name="Error"/>
         <enum-type name="State"/>
         <enum-type name="VolumeScale"/>
-        <inject-code class="target" position="end"
-                     file="../glue/qtmultimedia.cpp"
-                     snippet="qtaudio-namespace-compatibility-alias"/>
     </namespace-type>
 
     <namespace-type name="QtVideo" since="6.7">
@@ -64,9 +61,6 @@
         </modify-argument>
       </modify-function>
       <modify-function signature="stop()" allow-thread="true"/>
-      <!-- FIXME PYSIDE 7: Remove this (QT6_DECL_NEW_OVERLOAD_TAIL) -->
-      <declare-function signature="state()const" return-type="QtAudio::State"/>
-      <declare-function signature="error()const" return-type="QtAudio::Error"/>
     </object-type>
 
     <object-type name="QAudioSink">
@@ -81,9 +75,6 @@
         </modify-argument>
       </modify-function>
       <modify-function signature="stop()" allow-thread="true"/>
-      <!-- FIXME PYSIDE 7: Remove this (QT6_DECL_NEW_OVERLOAD_TAIL) -->
-      <declare-function signature="state()const" return-type="QtAudio::State"/>
-      <declare-function signature="error()const" return-type="QtAudio::Error"/>
     </object-type>
 
     <object-type name="QCamera">
diff --git a/sources/pyside6/PySide6/glue/qtmultimedia.cpp b/sources/pyside6/PySide6/glue/qtmultimedia.cpp
index d193b1bd3..3d46619fd 100644
--- a/sources/pyside6/PySide6/glue/qtmultimedia.cpp
+++ b/sources/pyside6/PySide6/glue/qtmultimedia.cpp
@@ -20,8 +20,3 @@ const unsigned char *data = %CPPSELF.%FUNCTION_NAME<unsigned char>();
 const auto size = %CPPSELF.byteCount();
 %PYARG_0 = Shiboken::Buffer::newObject(data, size);
 // @snippet qaudiobuffer-const-data
-
-// @snippet qtaudio-namespace-compatibility-alias
-Py_INCREF(pyType);
-PyModule_AddObject(module, "QAudio", reinterpret_cast<PyObject *>(pyType));
-// @snippet qtaudio-namespace-compatibility-alias
diff --git a/sources/pyside6/libpyside/signalmanager.cpp b/sources/pyside6/libpyside/signalmanager.cpp
index 1738fa926..b4e1bb487 100644
--- a/sources/pyside6/libpyside/signalmanager.cpp
+++ b/sources/pyside6/libpyside/signalmanager.cpp
@@ -30,8 +30,6 @@
 #include <limits>
 #include <memory>
 
-using namespace Qt::StringLiterals;
-
 #if QSLOT_CODE != 1 || QSIGNAL_CODE != 2
 #error QSLOT_CODE and/or QSIGNAL_CODE changed! change the hardcoded stuff to the correct value!
 #endif
@@ -717,13 +715,7 @@ static PyObject *parseArguments(const QList<QByteArray>& paramTypes, void **args
 
     for (qsizetype i = 0; i < argsSize; ++i) {
         void *data = args[i+1];
-        auto param = paramTypes.at(i);
-#if QT_VERSION < QT_VERSION_CHECK(7, 0, 0)
-        // Qt 6.7 renamed namespace "QAudio"->"QtAudio" except for signals
-        if (param.startsWith("QAudio::"_ba))
-            param.insert(1, 't');
-#endif
-        const char *dataType = param.constData();
+        const char *dataType = paramTypes[i].constData();
         Shiboken::Conversions::SpecificConverter converter(dataType);
         if (converter) {
             PyTuple_SET_ITEM(preparedArgs, i, converter.toPython(data));
